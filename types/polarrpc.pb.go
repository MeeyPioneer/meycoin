// Code generated by protoc-gen-go. DO NOT EDIT.
// source: polarrpc.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Paginations struct {
	Ref                  []byte   `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Size                 uint32   `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Paginations) Reset()         { *m = Paginations{} }
func (m *Paginations) String() string { return proto.CompactTextString(m) }
func (*Paginations) ProtoMessage()    {}
func (*Paginations) Descriptor() ([]byte, []int) {
	return fileDescriptor_polarrpc_1f6dae6536e3253f, []int{0}
}
func (m *Paginations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paginations.Unmarshal(m, b)
}
func (m *Paginations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paginations.Marshal(b, m, deterministic)
}
func (dst *Paginations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paginations.Merge(dst, src)
}
func (m *Paginations) XXX_Size() int {
	return xxx_messageInfo_Paginations.Size(m)
}
func (m *Paginations) XXX_DiscardUnknown() {
	xxx_messageInfo_Paginations.DiscardUnknown(m)
}

var xxx_messageInfo_Paginations proto.InternalMessageInfo

func (m *Paginations) GetRef() []byte {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Paginations) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type WezenPeerList struct {
	Total                uint32         `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	HasNext              bool           `protobuf:"varint,2,opt,name=hasNext" json:"hasNext,omitempty"`
	Peers                []*WezenPeer `protobuf:"bytes,3,rep,name=peers" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WezenPeerList) Reset()         { *m = WezenPeerList{} }
func (m *WezenPeerList) String() string { return proto.CompactTextString(m) }
func (*WezenPeerList) ProtoMessage()    {}
func (*WezenPeerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_polarrpc_1f6dae6536e3253f, []int{1}
}
func (m *WezenPeerList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WezenPeerList.Unmarshal(m, b)
}
func (m *WezenPeerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WezenPeerList.Marshal(b, m, deterministic)
}
func (dst *WezenPeerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WezenPeerList.Merge(dst, src)
}
func (m *WezenPeerList) XXX_Size() int {
	return xxx_messageInfo_WezenPeerList.Size(m)
}
func (m *WezenPeerList) XXX_DiscardUnknown() {
	xxx_messageInfo_WezenPeerList.DiscardUnknown(m)
}

var xxx_messageInfo_WezenPeerList proto.InternalMessageInfo

func (m *WezenPeerList) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *WezenPeerList) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

func (m *WezenPeerList) GetPeers() []*WezenPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type WezenPeer struct {
	Address   *PeerAddress `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Connected int64        `protobuf:"varint,2,opt,name=connected" json:"connected,omitempty"`
	// lastCheck contains unix timestamp with nanoseconds precision
	LastCheck            int64    `protobuf:"varint,3,opt,name=lastCheck" json:"lastCheck,omitempty"`
	Verion               string   `protobuf:"bytes,4,opt,name=verion" json:"verion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WezenPeer) Reset()         { *m = WezenPeer{} }
func (m *WezenPeer) String() string { return proto.CompactTextString(m) }
func (*WezenPeer) ProtoMessage()    {}
func (*WezenPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_polarrpc_1f6dae6536e3253f, []int{2}
}
func (m *WezenPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WezenPeer.Unmarshal(m, b)
}
func (m *WezenPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WezenPeer.Marshal(b, m, deterministic)
}
func (dst *WezenPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WezenPeer.Merge(dst, src)
}
func (m *WezenPeer) XXX_Size() int {
	return xxx_messageInfo_WezenPeer.Size(m)
}
func (m *WezenPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_WezenPeer.DiscardUnknown(m)
}

var xxx_messageInfo_WezenPeer proto.InternalMessageInfo

func (m *WezenPeer) GetAddress() *PeerAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *WezenPeer) GetConnected() int64 {
	if m != nil {
		return m.Connected
	}
	return 0
}

func (m *WezenPeer) GetLastCheck() int64 {
	if m != nil {
		return m.LastCheck
	}
	return 0
}

func (m *WezenPeer) GetVerion() string {
	if m != nil {
		return m.Verion
	}
	return ""
}

type BLConfEntries struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	Entries              []string `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BLConfEntries) Reset()         { *m = BLConfEntries{} }
func (m *BLConfEntries) String() string { return proto.CompactTextString(m) }
func (*BLConfEntries) ProtoMessage()    {}
func (*BLConfEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_polarrpc_1f6dae6536e3253f, []int{3}
}
func (m *BLConfEntries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BLConfEntries.Unmarshal(m, b)
}
func (m *BLConfEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BLConfEntries.Marshal(b, m, deterministic)
}
func (dst *BLConfEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BLConfEntries.Merge(dst, src)
}
func (m *BLConfEntries) XXX_Size() int {
	return xxx_messageInfo_BLConfEntries.Size(m)
}
func (m *BLConfEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_BLConfEntries.DiscardUnknown(m)
}

var xxx_messageInfo_BLConfEntries proto.InternalMessageInfo

func (m *BLConfEntries) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *BLConfEntries) GetEntries() []string {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AddEntryParams struct {
	PeerID               string   `protobuf:"bytes,1,opt,name=peerID" json:"peerID,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Cidr                 string   `protobuf:"bytes,3,opt,name=cidr" json:"cidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddEntryParams) Reset()         { *m = AddEntryParams{} }
func (m *AddEntryParams) String() string { return proto.CompactTextString(m) }
func (*AddEntryParams) ProtoMessage()    {}
func (*AddEntryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_polarrpc_1f6dae6536e3253f, []int{4}
}
func (m *AddEntryParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddEntryParams.Unmarshal(m, b)
}
func (m *AddEntryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddEntryParams.Marshal(b, m, deterministic)
}
func (dst *AddEntryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEntryParams.Merge(dst, src)
}
func (m *AddEntryParams) XXX_Size() int {
	return xxx_messageInfo_AddEntryParams.Size(m)
}
func (m *AddEntryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEntryParams.DiscardUnknown(m)
}

var xxx_messageInfo_AddEntryParams proto.InternalMessageInfo

func (m *AddEntryParams) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *AddEntryParams) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddEntryParams) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

type RmEntryParams struct {
	Index                uint32   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RmEntryParams) Reset()         { *m = RmEntryParams{} }
func (m *RmEntryParams) String() string { return proto.CompactTextString(m) }
func (*RmEntryParams) ProtoMessage()    {}
func (*RmEntryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_polarrpc_1f6dae6536e3253f, []int{5}
}
func (m *RmEntryParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RmEntryParams.Unmarshal(m, b)
}
func (m *RmEntryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RmEntryParams.Marshal(b, m, deterministic)
}
func (dst *RmEntryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RmEntryParams.Merge(dst, src)
}
func (m *RmEntryParams) XXX_Size() int {
	return xxx_messageInfo_RmEntryParams.Size(m)
}
func (m *RmEntryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RmEntryParams.DiscardUnknown(m)
}

var xxx_messageInfo_RmEntryParams proto.InternalMessageInfo

func (m *RmEntryParams) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*Paginations)(nil), "types.Paginations")
	proto.RegisterType((*WezenPeerList)(nil), "types.WezenPeerList")
	proto.RegisterType((*WezenPeer)(nil), "types.WezenPeer")
	proto.RegisterType((*BLConfEntries)(nil), "types.BLConfEntries")
	proto.RegisterType((*AddEntryParams)(nil), "types.AddEntryParams")
	proto.RegisterType((*RmEntryParams)(nil), "types.RmEntryParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WezenRPCService service

type WezenRPCServiceClient interface {
	// Returns the current state of this node
	NodeState(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*SingleBytes, error)
	// Returns node metrics according to request
	Metric(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*Metrics, error)
	CurrentList(ctx context.Context, in *Paginations, opts ...grpc.CallOption) (*WezenPeerList, error)
	WhiteList(ctx context.Context, in *Paginations, opts ...grpc.CallOption) (*WezenPeerList, error)
	BlackList(ctx context.Context, in *Paginations, opts ...grpc.CallOption) (*WezenPeerList, error)
	ListBLEntries(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BLConfEntries, error)
	AddBLEntry(ctx context.Context, in *AddEntryParams, opts ...grpc.CallOption) (*SingleString, error)
	RemoveBLEntry(ctx context.Context, in *RmEntryParams, opts ...grpc.CallOption) (*SingleString, error)
}

type wezenRPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewWezenRPCServiceClient(cc *grpc.ClientConn) WezenRPCServiceClient {
	return &wezenRPCServiceClient{cc}
}

func (c *wezenRPCServiceClient) NodeState(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*SingleBytes, error) {
	out := new(SingleBytes)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/NodeState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wezenRPCServiceClient) Metric(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*Metrics, error) {
	out := new(Metrics)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/Metric", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wezenRPCServiceClient) CurrentList(ctx context.Context, in *Paginations, opts ...grpc.CallOption) (*WezenPeerList, error) {
	out := new(WezenPeerList)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/CurrentList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wezenRPCServiceClient) WhiteList(ctx context.Context, in *Paginations, opts ...grpc.CallOption) (*WezenPeerList, error) {
	out := new(WezenPeerList)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/WhiteList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wezenRPCServiceClient) BlackList(ctx context.Context, in *Paginations, opts ...grpc.CallOption) (*WezenPeerList, error) {
	out := new(WezenPeerList)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/BlackList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wezenRPCServiceClient) ListBLEntries(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BLConfEntries, error) {
	out := new(BLConfEntries)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/ListBLEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wezenRPCServiceClient) AddBLEntry(ctx context.Context, in *AddEntryParams, opts ...grpc.CallOption) (*SingleString, error) {
	out := new(SingleString)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/AddBLEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wezenRPCServiceClient) RemoveBLEntry(ctx context.Context, in *RmEntryParams, opts ...grpc.CallOption) (*SingleString, error) {
	out := new(SingleString)
	err := grpc.Invoke(ctx, "/types.WezenRPCService/RemoveBLEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WezenRPCService service

type WezenRPCServiceServer interface {
	// Returns the current state of this node
	NodeState(context.Context, *NodeReq) (*SingleBytes, error)
	// Returns node metrics according to request
	Metric(context.Context, *MetricsRequest) (*Metrics, error)
	CurrentList(context.Context, *Paginations) (*WezenPeerList, error)
	WhiteList(context.Context, *Paginations) (*WezenPeerList, error)
	BlackList(context.Context, *Paginations) (*WezenPeerList, error)
	ListBLEntries(context.Context, *Empty) (*BLConfEntries, error)
	AddBLEntry(context.Context, *AddEntryParams) (*SingleString, error)
	RemoveBLEntry(context.Context, *RmEntryParams) (*SingleString, error)
}

func RegisterWezenRPCServiceServer(s *grpc.Server, srv WezenRPCServiceServer) {
	s.RegisterService(&_WezenRPCService_serviceDesc, srv)
}

func _WezenRPCService_NodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).NodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/NodeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).NodeState(ctx, req.(*NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WezenRPCService_Metric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).Metric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/Metric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).Metric(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WezenRPCService_CurrentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paginations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).CurrentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/CurrentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).CurrentList(ctx, req.(*Paginations))
	}
	return interceptor(ctx, in, info, handler)
}

func _WezenRPCService_WhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paginations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).WhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/WhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).WhiteList(ctx, req.(*Paginations))
	}
	return interceptor(ctx, in, info, handler)
}

func _WezenRPCService_BlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paginations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).BlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/BlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).BlackList(ctx, req.(*Paginations))
	}
	return interceptor(ctx, in, info, handler)
}

func _WezenRPCService_ListBLEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).ListBLEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/ListBLEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).ListBLEntries(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WezenRPCService_AddBLEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).AddBLEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/AddBLEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).AddBLEntry(ctx, req.(*AddEntryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WezenRPCService_RemoveBLEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmEntryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WezenRPCServiceServer).RemoveBLEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.WezenRPCService/RemoveBLEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WezenRPCServiceServer).RemoveBLEntry(ctx, req.(*RmEntryParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _WezenRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.WezenRPCService",
	HandlerType: (*WezenRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeState",
			Handler:    _WezenRPCService_NodeState_Handler,
		},
		{
			MethodName: "Metric",
			Handler:    _WezenRPCService_Metric_Handler,
		},
		{
			MethodName: "CurrentList",
			Handler:    _WezenRPCService_CurrentList_Handler,
		},
		{
			MethodName: "WhiteList",
			Handler:    _WezenRPCService_WhiteList_Handler,
		},
		{
			MethodName: "BlackList",
			Handler:    _WezenRPCService_BlackList_Handler,
		},
		{
			MethodName: "ListBLEntries",
			Handler:    _WezenRPCService_ListBLEntries_Handler,
		},
		{
			MethodName: "AddBLEntry",
			Handler:    _WezenRPCService_AddBLEntry_Handler,
		},
		{
			MethodName: "RemoveBLEntry",
			Handler:    _WezenRPCService_RemoveBLEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polarrpc.proto",
}

func init() { proto.RegisterFile("polarrpc.proto", fileDescriptor_polarrpc_1f6dae6536e3253f) }

var fileDescriptor_polarrpc_1f6dae6536e3253f = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcb, 0x6a, 0xdb, 0x40,
	0x14, 0xb5, 0xa2, 0xd8, 0x89, 0xae, 0x2d, 0xb7, 0x9d, 0xba, 0x41, 0x88, 0x2e, 0x84, 0xa0, 0xa0,
	0x45, 0x31, 0x24, 0xa1, 0x8b, 0x3e, 0x36, 0xb6, 0x9b, 0x45, 0xc1, 0x0d, 0x66, 0x0c, 0xed, 0x7a,
	0xa2, 0xb9, 0xb1, 0x07, 0xcb, 0x23, 0x65, 0x66, 0x62, 0xe2, 0xfe, 0x44, 0xbf, 0xb0, 0xff, 0x52,
	0x34, 0x92, 0xfc, 0xa0, 0x74, 0x93, 0xdd, 0x9c, 0x7b, 0xee, 0xb9, 0xef, 0x81, 0x7e, 0x91, 0x67,
	0x4c, 0xa9, 0x22, 0x1d, 0x16, 0x2a, 0x37, 0x39, 0x69, 0x9b, 0x6d, 0x81, 0x3a, 0x04, 0x99, 0x73,
	0xac, 0x4c, 0xa1, 0xb7, 0x63, 0xc3, 0xde, 0x1a, 0x8d, 0x12, 0x35, 0x8a, 0xaf, 0xa1, 0x3b, 0x63,
	0x0b, 0x21, 0x99, 0x11, 0xb9, 0xd4, 0xe4, 0x25, 0xb8, 0x0a, 0xef, 0x03, 0x27, 0x72, 0x92, 0x1e,
	0x2d, 0x9f, 0x84, 0xc0, 0xa9, 0x16, 0xbf, 0x30, 0x70, 0x23, 0x27, 0xf1, 0xa9, 0x7d, 0xc7, 0x2b,
	0x78, 0x31, 0x2b, 0x53, 0x0a, 0x3d, 0x43, 0x54, 0x53, 0xa1, 0x0d, 0x19, 0x40, 0xdb, 0xe4, 0x86,
	0x65, 0x56, 0xea, 0xd3, 0x0a, 0x90, 0x00, 0xce, 0x96, 0x4c, 0xdf, 0xe2, 0x93, 0x09, 0x4e, 0x22,
	0x27, 0x39, 0xa7, 0x0d, 0x24, 0x09, 0xb4, 0x0b, 0x44, 0xa5, 0x03, 0x37, 0x72, 0x93, 0xee, 0x15,
	0x19, 0xda, 0x9a, 0x87, 0x07, 0x61, 0x69, 0xe5, 0x10, 0xff, 0x76, 0xa0, 0x7b, 0x60, 0x26, 0xef,
	0xe1, 0x8c, 0x71, 0xae, 0x50, 0x6b, 0x9b, 0xeb, 0x40, 0x8b, 0xa8, 0x46, 0x15, 0x43, 0x1b, 0x17,
	0xf2, 0x16, 0xbc, 0x34, 0x97, 0x12, 0x53, 0x83, 0xdc, 0xd6, 0xe0, 0xd2, 0xbd, 0xa1, 0x64, 0x33,
	0xa6, 0xcd, 0x64, 0x89, 0xe9, 0xca, 0x76, 0xe8, 0xd2, 0xbd, 0x81, 0x5c, 0x40, 0x67, 0x83, 0x4a,
	0xe4, 0x32, 0x38, 0x8d, 0x9c, 0xc4, 0xa3, 0x35, 0x8a, 0x27, 0xe0, 0x8f, 0xa7, 0x93, 0x5c, 0xde,
	0xdf, 0x48, 0xa3, 0x04, 0xea, 0xb2, 0x4d, 0x94, 0xec, 0x2e, 0x43, 0x6e, 0x4b, 0x3a, 0xa7, 0x0d,
	0xac, 0x18, 0xeb, 0x14, 0x9c, 0x44, 0x6e, 0xe2, 0xd1, 0x06, 0xc6, 0x3f, 0xa0, 0x3f, 0xe2, 0xbc,
	0x8c, 0xb0, 0x9d, 0x31, 0xc5, 0xd6, 0xba, 0x4c, 0x57, 0x76, 0xfc, 0xed, 0xab, 0x0d, 0xe2, 0xd1,
	0x1a, 0x95, 0x31, 0x9a, 0x86, 0x4f, 0x2c, 0xb1, 0x6b, 0x8e, 0xc0, 0x69, 0x2a, 0xb8, 0xb2, 0x95,
	0x7b, 0xd4, 0xbe, 0xe3, 0x77, 0xe0, 0xd3, 0xf5, 0x61, 0xd8, 0x01, 0xb4, 0x85, 0xe4, 0xf8, 0xd4,
	0x6c, 0xc6, 0x82, 0xab, 0x3f, 0x2e, 0xbc, 0xaa, 0xa7, 0x4a, 0x67, 0x93, 0x39, 0xaa, 0x8d, 0x48,
	0x91, 0x5c, 0x82, 0x77, 0x9b, 0x73, 0x9c, 0x1b, 0x66, 0x90, 0xf4, 0xeb, 0xb9, 0x96, 0x16, 0x8a,
	0x0f, 0x61, 0x33, 0xe7, 0xb9, 0x90, 0x8b, 0x0c, 0xc7, 0x5b, 0x83, 0x3a, 0x6e, 0x91, 0x4b, 0xe8,
	0x7c, 0xb7, 0x07, 0x45, 0xde, 0xd4, 0x7c, 0x05, 0x35, 0xc5, 0x87, 0x47, 0xd4, 0x26, 0xec, 0x1f,
	0x9b, 0xe3, 0x16, 0xf9, 0x0c, 0xdd, 0xc9, 0xa3, 0x52, 0x28, 0x8d, 0x3d, 0x9d, 0xdd, 0xfe, 0xf6,
	0x77, 0x18, 0x5e, 0xfc, 0x7b, 0x0f, 0xa5, 0x6f, 0xdc, 0x22, 0x1f, 0xc1, 0xfb, 0xb9, 0x14, 0x06,
	0x9f, 0x27, 0x1d, 0x67, 0x2c, 0x5d, 0x3d, 0x43, 0xfa, 0x01, 0xfc, 0xf2, 0x35, 0x9e, 0x36, 0x2b,
	0xef, 0xd5, 0xae, 0x37, 0xeb, 0xc2, 0x6c, 0xc3, 0x41, 0x8d, 0x8e, 0xce, 0x22, 0x6e, 0x91, 0x4f,
	0x00, 0x23, 0xce, 0x2b, 0xd5, 0x76, 0x37, 0xa0, 0xe3, 0xbd, 0x87, 0xaf, 0x8f, 0xe6, 0x3a, 0x37,
	0x4a, 0xc8, 0x45, 0xdc, 0x22, 0x5f, 0xc0, 0xa7, 0xb8, 0xce, 0x37, 0xd8, 0xc8, 0x9b, 0x24, 0x47,
	0xeb, 0xfd, 0x8f, 0xfa, 0xae, 0x63, 0xbf, 0xf7, 0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2,
	0x5a, 0x3f, 0xbc, 0x1c, 0x04, 0x00, 0x00,
}
